import React from 'react';
import PropTypes from 'prop-types';
import { Form, FastField } from 'formik';
import * as Yup from 'yup';

import { Input, Button, Columns, DateInput } from '../../shared/ui';

/**
 * Generator schema for this form
 * Contains validation for fields firstName, lastName, annualSalary, superRate
 * and payPeriod
 */
export const GeneratorSchema = Yup.object().shape({
  firstName: Yup.string().required('Please enter your First Name'),
  lastName: Yup.string().required('Please enter your Last Name'),
  annualSalary: Yup.number()
    .positive('Please enter a valid Annual Salary')
    .required('Please enter your Annual Salary'),
  superRate: Yup.number()
    .min(0, 'Please enter a valid Superannuation Rate (0 - 50%)')
    .max(50, 'Please enter a valid Superannuation Rate (0 - 50%)')
    .required('Please enter your Superannuation Rate'),
  payPeriod: Yup.date().required('Please provide a pay period'),
});

const currentDate = new Date();

/**
 * Generator form generated by Formik for our Payslip generate screen
 * @param {object} Params from Formik for this Payslip generator screen
 */
const GeneratorForm = ({ isSubmitting, handleSubmit, isValid }) => (
  <Form>
    <Columns>
      <FastField
        name="firstName"
        render={({ field, form }) => (
          <Input
            type="text"
            name="firstName"
            label="First Name"
            {...field}
            errorMessage={
              form.touched.firstName && form.errors.firstName
                ? form.errors.firstName
                : null
            }
          />
        )}
      />
      <FastField
        name="lastName"
        render={({ field, form }) => (
          <Input
            type="text"
            name="lastName"
            label="Last Name"
            {...field}
            errorMessage={
              form.touched.lastName && form.errors.lastName
                ? form.errors.lastName
                : null
            }
          />
        )}
      />
    </Columns>
    <Columns>
      <FastField
        name="annualSalary"
        render={({ field, form }) => (
          <Input
            type="number"
            name="annualSalary"
            label="Annual Salary"
            {...field}
            errorMessage={
              form.touched.annualSalary && form.errors.annualSalary
                ? form.errors.annualSalary
                : null
            }
          />
        )}
      />
      <FastField
        name="superRate"
        render={({ field, form }) => (
          <Input
            type="number"
            name="superRate"
            label="Superannuation Rate"
            {...field}
            errorMessage={
              form.touched.superRate && form.errors.superRate
                ? form.errors.superRate
                : null
            }
          />
        )}
      />
      {/* 
        Unfortunately react datepicker currently does not honour the 
        maxDate prop for month picker.
        This was fixed in this commit below - so the payslip month selection 
        currently lets you go over the current month :(
        https://github.com/gautam-pahuja/react-datepicker/commit/66c1e370b6cb24ad7aef86fc384067159aff43ab 
      */}
      <FastField
        name="payPeriod"
        render={({ field, form }) => (
          <DateInput
            name="payPeriod"
            label="Pay Period"
            todayButton="This month"
            showMonthYearPicker
            maxDate={currentDate}
            {...field}
            formik={{ ...form }}
            errorMessage={
              form.touched.payPeriod && form.errors.payPeriod
                ? form.errors.payPeriod
                : null
            }
          />
        )}
      />
    </Columns>
    <Button
      id="paylsip-generate-button"
      type="button"
      colour="primary"
      size="small"
      onClick={handleSubmit}
      disabled={!isValid || isSubmitting}
      aria-label="Generate Payslip"
    >
      Generate Payslip
    </Button>
  </Form>
);

GeneratorForm.propTypes = {
  /** Values from Formik */
  values: PropTypes.object.isRequired,
  /** Object of touched elements from Formik */
  touched: PropTypes.object.isRequired,
  /** Function to handle form submission */
  handleSubmit: PropTypes.func.isRequired,
  /** Function to handle field change */
  handleChange: PropTypes.func.isRequired,
  /** Function to handle field blur */
  handleBlur: PropTypes.func.isRequired,
  /** Boolean to determine if form passes validation schema */
  isValid: PropTypes.bool.isRequired,
  isSubmitting: PropTypes.bool,
  errors: PropTypes.object,
};

GeneratorForm.defaultProps = {
  isSubmitting: false,
  errors: {},
};

export default GeneratorForm;
